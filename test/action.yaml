name: Python Test
description: GitHub Action that tests a python based repository
inputs:
  github-token:
    required: true
    description: GitHub token that can checkout the repository. e.g. 'secrets.GITHUB_TOKEN'
    default: ${{ github.token }}
  python-version:
    required: false
    description: Python version to install on the github runner.
    default: ""
  test-flags:
    required: false
    description: Flags and args for test command
    default: ""
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    #cache installation of poetry
    - name: Restore Poetry from Cache
      id: cache-poetry
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/pipx_cache
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

    - name: Copy pipx installs to workspace if not cached
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p ${{ github.workspace }}/pipx_cache/home
        mkdir -p ${{ github.workspace }}/pipx_cache/bin
        sudo cp -r $PIPX_HOME ${{ github.workspace }}/pipx_cache/home
        sudo cp -r $PIPX_BIN_DIR ${{ github.workspace }}/pipx_cache/bin

    - name: Copy pipx installs back if cached
      if: steps.cache-poetry.outputs.cache-hit == 'true'
      shell: bash
      run: |
        sudo cp -r ${{ github.workspace }}/pipx_cache/home/* $PIPX_HOME
        sudo cp -r ${{ github.workspace }}/pipx_cache/bin/* $PIPX_BIN_DIR
        pipx ensurepath
        pipx list
    - name: Ensure Pipx Paths
      shell: bash
      if: hashFiles('poetry.lock') != ''
      run: |
        pipx ensurepath
        pipx list
    - name: Install poetry
      if: hashFiles('poetry.lock') != '' && steps.cache-pipx.outputs.cache-hit != 'true'
      shell: bash
      run: pipx install poetry
      # If we do have a poetry.lock, we use a poetry based workflow
      # See README.md for more information on what is supported
    - name: Setup python
      if: hashFiles('poetry.lock') != ''
      uses: actions/setup-python@v4
      with:
        cache: "poetry"
        python-version: ${{ inputs.python-version }}
    - run: poetry install
      shell: bash
    - run: poetry run pytest
      shell: bash

    # If we don't have a poetry.lock, we use a pip based workflow
    - name: Setup python
      if: hashFiles('poetry.lock') == ''
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip"
    - name: Install pip dependencies
      if: hashFiles('poetry.lock') == ''
      shell: bash
      run: |
        pip install -r requirements.txt
    - name: Run pip tests
      if: hashFiles('poetry.lock') == ''
      shell: bash
      run: pytest ${{ inputs.test-flags }}
