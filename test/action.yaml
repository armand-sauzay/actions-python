name: Python Test
description: GitHub Action that tests a python based repository
inputs:
  github-token:
    required: true
    description: GitHub token that can checkout the repository. e.g. 'secrets.GITHUB_TOKEN'
    default: ${{ github.token }}
  python-version:
    required: false
    description: Python version to install on the github runner.
    default: ""
  test-flags:
    required: false
    description: Flags and args for test command
    default: ""
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    #cache installation of poetry
    - name: Setup Local Variables
      id: variable-setup
      if: hashFiles('poetry.lock') != ''
      run: |
        echo "pipx-home=$PIPX_HOME" >> $GITHUB_OUTPUT
        echo "pipx-bin-dir=$PIPX_BIN_DIR" >> $GITHUB_OUTPUT
        echo "cache-key-pipx=pipx-${{ runner.os }}-${{ inputs.python-version }}-poetry" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache pipx
      id: cache-pipx
      if: hashFiles('poetry.lock') != ''
      uses: actions/cache@v3
      with:
        path: |
          ${{ steps.variable-setup.outputs.pipx-home }}
          ${{ steps.variable-setup.outputs.pipx-bin-dir }}
        key: ${{ steps.variable-setup.outputs.cache-key-pipx }}

    - name: Install poetry
      if: hashFiles('poetry.lock') != '' && steps.cache-pipx.outputs.cache-hit != 'true'
      shell: bash
      run: pipx install poetry

    - name: Ensure Pipx Paths
      if: hashFiles('poetry.lock') != ''
      run: |
        pipx ensurepath
        pipx list
      shell: bash
      # If we do have a poetry.lock, we use a poetry based workflow
      # See README.md for more information on what is supported
    - name: Setup python
      if: hashFiles('poetry.lock') != ''
      uses: actions/setup-python@v4
      with:
        cache: "poetry"
        python-version: ${{ inputs.python-version }}
    - run: poetry install
      shell: bash
    - run: poetry run pytest
      shell: bash

    # If we don't have a poetry.lock, we use a pip based workflow
    - name: Setup python
      if: hashFiles('poetry.lock') == ''
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip"
    - name: Install pip dependencies
      if: hashFiles('poetry.lock') == ''
      shell: bash
      run: |
        pip install -r requirements.txt
    - name: Run pip tests
      if: hashFiles('poetry.lock') == ''
      shell: bash
      run: pytest ${{ inputs.test-flags }}
